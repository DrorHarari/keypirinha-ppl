# Export contacts from an organization's Active Directory (AD) into a
# contacts.json file that can be used with the Keypirinha plugin Ppl
# (see http://github.com/DrorHarari/keypirinha-ppl)
#
# Prerequisites:
# 1. This program depends on the win32com Python package. Install
#    it with the command:
#      $ pip install pywin32
# 2. This program relies on the user's Windows Authentication to access AD.
# 3. Various companies use different attributes in their contacts objects
#    in AD. The attributes used here are defined in CONTACT_AD_ATTRS, your
#    organization may differ. The best tool to use to find what attributes
#    are used in your organization is the Microsoft ADExplorer.exe program
#    (see https://docs.microsoft.com/en-us/sysinternals/downloads/adexplorer)
# 4. The contacts.json generated by this program should be placed in 
#    Keypirinha's User folder ({Keypirinha-Root-Dir}\portable\Profile\User)
# 5. Note that the Ppl plugin will ignore contacts that do not at least the
#    first attribute (displayName here)
#
# Note: If you do not want to permanently install the pywin32 package in
# your environment, you can set a disposable virtual environment as follows:
# 
# # {ensure you have Python 3.6+ installed)
# $ python -m venv tempenv
# $ cd tempenv 
# $ .\Scripts\activate.bat
# $ pip install pywin32
# {now you can run make_contacts.py}
# {you may need to repeat after some edits...}
# {finally you can delete the virtual environment}
# $ cd ..
# $ rmdir /s /q tempenv
import win32com.client
import io
import sys
import json

# Name of CN (common name) attributes for (in order):
# full name, email address, company name, department name, title, phone#, mobile#
CONTACT_AD_ATTRS = ["displayName", "mail", "company", "department", "description", "telephoneNumber", "mobile"]
REQUIRED_ATTRS = ["mail", "telephoneNumber", "mobile"]

# The Active Directory OU (organization unit) where the contacts are
CONTACTS_OU = "OU=Employees"

def add_cn(adobj, entries):
    entry = {}
    for attr in CONTACT_AD_ATTRS:
        try:
            entry[attr] = getattr(adobj,attr)
        except Exception as exc:
            print(f"No attr {attr} for {adobj.cn}")
            pass
    for ra in REQUIRED_ATTRS:
        if ra in entry and entry[ra] is not None:
            print(f"Adding {adobj.cn}")
            entries.append(entry)
            return

def scan_ou_s(ldap_path, entries):
    print(f"Scanning LDAP path: LDAP://{ldap_path}")
    for o in win32com.client.GetObject(f"LDAP://{ldap_path}"):
        if o.cn == 'Active Directory Connections':
            continue
        elif o.cn is not None:
            add_cn(o, entries)
        elif o.ou != None:
            scan_ou_s(f"OU={o.ou},{ldap_path}", entries)

# This function tries to auto-discover the AD LDAP base location 
print("Finding your Active Directory LDAP base location...")
try:
    ldap_loc=win32com.client.GetObject('LDAP://rootDSE').Get("defaultNamingContext")
except Exception as exc:
    print(f"Failed to find LDAP base location. {exc}")
    sys.exit(1)

print(f"Found base location: LDAP://{ldap_loc}")

entries = []
scan_loc = ",".join([CONTACTS_OU, ldap_loc])
scan_ou_s(scan_loc, entries)

print(f"Writing contacts to : contacts.json")
with io.open('contacts.json', 'w', encoding='utf8') as outfile:
    contacts = json.dumps(entries,
                      indent=4, sort_keys=True,
                      separators=(',', ': '), ensure_ascii=False)
    outfile.write(contacts)
